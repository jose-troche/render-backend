openapi: 3.0.0
info:
  title: School Management API
  version: 1.0.0
  description: This is an API for managing students, classes, professors, and departments in a school.

paths:
  /students:
    get:
      summary: List all students
      responses:
        '200':
          description: A list of students
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Student'
    post:
      summary: Create a student
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Student'
      responses:
        '201':
          description: Student created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Student'
        '400':
          $ref: '#/components/responses/BadRequest'

  /students/{studentId}:
    parameters:
      - name: studentId
        in: path
        required: true
        schema:
          type: string
    get:
      summary: Get a student by ID
      responses:
        '200':
          description: A single student
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Student'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      summary: Update a student
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Student'
      responses:
        '200':
          description: Student updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Student'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      summary: Delete a student
      responses:
        '204':
          description: Student deleted
        '404':
          $ref: '#/components/responses/NotFound'

  /classes:
    get:
      summary: List all classes
      responses:
        '200':
          description: A list of classes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Class'
    post:
      summary: Create a class
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Class'
      responses:
        '201':
          description: Class created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Class'
        '400':
          $ref: '#/components/responses/BadRequest'

  /classes/{classId}:
    parameters:
      - name: classId
        in: path
        required: true
        schema:
          type: string
    get:
      summary: Get a class by ID
      responses:
        '200':
          description: A single class
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Class'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      summary: Update a class
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Class'
      responses:
        '200':
          description: Class updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Class'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      summary: Delete a class
      responses:
        '204':
          description: Class deleted
        '404':
          $ref: '#/components/responses/NotFound'

  /classes/{classId}/students:
    get:
      summary: List all students for a class
      parameters:
        - name: classId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A list of students
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Student'
        '404':
          $ref: '#/components/responses/NotFound'

  /departments:
    get:
      summary: List all departments
      responses:
        '200':
          description: A list of departments
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Department'
    post:
      summary: Create a department
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Department'
      responses:
        '201':
          description: Department created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Department'
        '400':
          $ref: '#/components/responses/BadRequest'

  /departments/{departmentId}:
    parameters:
      - name: departmentId
        in: path
        required: true
        schema:
          type: string
    get:
      summary: Get a department by ID
      responses:
        '200':
          description: A single department
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Department'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      summary: Update a department
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Department'
      responses:
        '200':
          description: Department updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Department'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      summary: Delete a department
      responses:
        '204':
          description: Department deleted
        '404':
          $ref: '#/components/responses/NotFound'

  /departments/{departmentId}/classes:
    get:
      summary: List all classes in a department
      parameters:
        - name: departmentId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A list of classes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Class'
        '404':
          $ref: '#/components/responses/NotFound'

  /departments/{departmentId}/professors:
    get:
      summary: List all professors in a department
      parameters:
        - name: departmentId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: A list of professors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Professor'
        '404':
          $ref: '#/components/responses/NotFound'

  /professors:
    get:
      summary: List all professors
      responses:
        '200':
          description: A list of professors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Professor'
    post:
      summary: Create a professor
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Professor'
      responses:
        '201':
          description: Professor created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Professor'
        '400':
          $ref: '#/components/responses/BadRequest'

  /professors/{professorId}:
    parameters:
      - name: professorId
        in: path
        required: true
        schema:
          type: string
    get:
      summary: Get a professor by ID
      responses:
        '200':
          description: A single professor
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Professor'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      summary: Update a professor
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Professor'
      responses:
        '200':
          description: Professor updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Professor'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      summary: Delete a professor
      responses:
        '204':
          description: Professor deleted
        '404':
          $ref: '#/components/responses/NotFound'

components:
  schemas:
    Student:
      type: object
      required:
        - name
      properties:
        id:
          type: string
        name:
          type: string
        birthDate:
          type: string
          format: date
        address:
          type: string
        phone:
          type: string
        enrolledClasses:
          type: array
          items:
            type: string

    Class:
      type: object
      required:
        - name
        - term
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        term:
          type: string
        students:
          type: array
          items:
            type: string
        professor:
          type: string
        department:
          type: string

    Professor:
      type: object
      required:
        - name
      properties:
        id:
          type: string
        name:
          type: string
        address:
          type: string
        phone:
          type: string
        hireDate:
          type: string
          format: date
        classes:
          type: array
          items:
            type: string

    Department:
      type: object
      required:
        - name
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        headOfDepartment:
          type: string
        classes:
          type: array
          items:
            type: string

    Error:
      type: object
      properties:
        message:
          type: string

  responses:
    NotFound:
      description: Entity not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    
    BadRequest:
      description: Invalid request payload.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'